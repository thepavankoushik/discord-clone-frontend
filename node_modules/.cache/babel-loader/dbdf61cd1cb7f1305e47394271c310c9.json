{"ast":null,"code":"import _objectSpread from\"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{useHistory}from\"react-router-dom\";import AuthBox from\"../../shared/components/AuthBox\";import LoginPageHeader from\"./LoginPageHeader\";import LoginPageInputs from\"./LoginPageInputs\";import LoginPageFooter from\"./LoginPageFooter\";import{validateLoginForm}from\"../../shared/utils/validators\";import{connect}from\"react-redux\";import{getActions}from\"../../store/actions/authActions\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LoginPage=function LoginPage(_ref){var login=_ref.login;var history=useHistory();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),mail=_useState2[0],setMail=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],setPassword=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isFormValid=_useState6[0],setIsFormValid=_useState6[1];useEffect(function(){// runs form validation logic every time the mail, password and form validation state is changed\nsetIsFormValid(validateLoginForm({mail:mail,password:password}));},[mail,password,setIsFormValid]);var handleLogin=function handleLogin(){var userDetails={mail:mail,password:password};login(userDetails,history);};return/*#__PURE__*/_jsxs(AuthBox,{children:[/*#__PURE__*/_jsx(LoginPageHeader,{}),/*#__PURE__*/_jsx(LoginPageInputs,{mail:mail,setMail:setMail,password:password,setPassword:setPassword}),/*#__PURE__*/_jsx(LoginPageFooter,{isFormValid:isFormValid,handleLogin:handleLogin})]});};// now, useSelector and useDispatch are a set of hooks to use as alternatives to the existing connect() higher-order component.\nvar mapActionsToProps=function mapActionsToProps(dispatch){return _objectSpread({},getActions(dispatch));};export default connect(null,mapActionsToProps)(LoginPage);","map":{"version":3,"names":["React","useState","useEffect","useHistory","AuthBox","LoginPageHeader","LoginPageInputs","LoginPageFooter","validateLoginForm","connect","getActions","LoginPage","login","history","mail","setMail","password","setPassword","isFormValid","setIsFormValid","handleLogin","userDetails","mapActionsToProps","dispatch"],"sources":["/Users/pavankoushik/Downloads/mern-discord-clone/frontend/src/authPages/LoginPage/LoginPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthBox from \"../../shared/components/AuthBox\";\nimport LoginPageHeader from \"./LoginPageHeader\";\nimport LoginPageInputs from \"./LoginPageInputs\";\nimport LoginPageFooter from \"./LoginPageFooter\";\nimport { validateLoginForm } from \"../../shared/utils/validators\";\nimport { connect } from \"react-redux\";\nimport { getActions } from \"../../store/actions/authActions\";\n\nconst LoginPage = ({ login }) => {\n  const history = useHistory();\n\n  const [mail, setMail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  useEffect(() => {\n    // runs form validation logic every time the mail, password and form validation state is changed\n    setIsFormValid(validateLoginForm({ mail, password }));\n  }, [mail, password, setIsFormValid]);\n\n  const handleLogin = () => {\n    const userDetails = {\n      mail,\n      password,\n    };\n    login(userDetails, history);\n  };\n\n  return (\n    <AuthBox>\n      <LoginPageHeader />\n      <LoginPageInputs\n        mail={mail}\n        setMail={setMail}\n        password={password}\n        setPassword={setPassword}\n      />\n      <LoginPageFooter isFormValid={isFormValid} handleLogin={handleLogin} />\n    </AuthBox>\n  );\n};\n\n// now, useSelector and useDispatch are a set of hooks to use as alternatives to the existing connect() higher-order component.\nconst mapActionsToProps = (dispatch) => {\n  return {\n    ...getActions(dispatch),\n  };\n};\n\nexport default connect(null, mapActionsToProps)(LoginPage);\n"],"mappings":"6RAAA,MAAOA,MAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,MAAOC,QAAO,KAAM,iCAAiC,CACrD,MAAOC,gBAAe,KAAM,mBAAmB,CAC/C,MAAOC,gBAAe,KAAM,mBAAmB,CAC/C,MAAOC,gBAAe,KAAM,mBAAmB,CAC/C,OAASC,iBAAiB,KAAQ,+BAA+B,CACjE,OAASC,OAAO,KAAQ,aAAa,CACrC,OAASC,UAAU,KAAQ,iCAAiC,CAAC,wFAE7D,GAAMC,UAAS,CAAG,QAAZA,UAAS,MAAkB,IAAZC,MAAK,MAALA,KAAK,CACxB,GAAMC,QAAO,CAAGV,UAAU,EAAE,CAE5B,cAAwBF,QAAQ,CAAC,EAAE,CAAC,wCAA7Ba,IAAI,eAAEC,OAAO,eACpB,eAAgCd,QAAQ,CAAC,EAAE,CAAC,yCAArCe,QAAQ,eAAEC,WAAW,eAC5B,eAAsChB,QAAQ,CAAC,KAAK,CAAC,yCAA9CiB,WAAW,eAAEC,cAAc,eAElCjB,SAAS,CAAC,UAAM,CACd;AACAiB,cAAc,CAACX,iBAAiB,CAAC,CAAEM,IAAI,CAAJA,IAAI,CAAEE,QAAQ,CAARA,QAAS,CAAC,CAAC,CAAC,CACvD,CAAC,CAAE,CAACF,IAAI,CAAEE,QAAQ,CAAEG,cAAc,CAAC,CAAC,CAEpC,GAAMC,YAAW,CAAG,QAAdA,YAAW,EAAS,CACxB,GAAMC,YAAW,CAAG,CAClBP,IAAI,CAAJA,IAAI,CACJE,QAAQ,CAARA,QACF,CAAC,CACDJ,KAAK,CAACS,WAAW,CAAER,OAAO,CAAC,CAC7B,CAAC,CAED,mBACE,MAAC,OAAO,yBACN,KAAC,eAAe,IAAG,cACnB,KAAC,eAAe,EACd,IAAI,CAAEC,IAAK,CACX,OAAO,CAAEC,OAAQ,CACjB,QAAQ,CAAEC,QAAS,CACnB,WAAW,CAAEC,WAAY,EACzB,cACF,KAAC,eAAe,EAAC,WAAW,CAAEC,WAAY,CAAC,WAAW,CAAEE,WAAY,EAAG,GAC/D,CAEd,CAAC,CAED;AACA,GAAME,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIC,QAAQ,CAAK,CACtC,wBACKb,UAAU,CAACa,QAAQ,CAAC,EAE3B,CAAC,CAED,cAAed,QAAO,CAAC,IAAI,CAAEa,iBAAiB,CAAC,CAACX,SAAS,CAAC"},"metadata":{},"sourceType":"module"}