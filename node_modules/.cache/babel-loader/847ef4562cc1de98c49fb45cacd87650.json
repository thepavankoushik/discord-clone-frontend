{"ast":null,"code":"import _objectSpread from\"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import store from\"../store/store\";import{setOpenRoom,setRoomDetails,setActiveRooms,setLocalStream,setRemoteStreams,setScreenSharingStream,setIsUserJoinedOnlyWithAudio}from\"../store/actions/roomActions\";import*as socketConnection from\"./socketConnection\";import*as webRTCHandler from\"./webRTCHandler\";export var createNewRoom=function createNewRoom(){// only create room when we successfully get access to local stream(ie audio and video)\nvar successCalbackFunc=function successCalbackFunc(){store.dispatch(setOpenRoom(true,true));var audioOnly=store.getState().room.audioOnly;store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));socketConnection.createNewRoom();};var audioOnly=store.getState().room.audioOnly;webRTCHandler.getLocalStreamPreview(audioOnly,successCalbackFunc);};export var newRoomCreated=function newRoomCreated(data){var roomDetails=data.roomDetails;store.dispatch(setRoomDetails(roomDetails));};export var updateActiveRooms=function updateActiveRooms(data){var _store$getState$auth$;var activeRooms=data.activeRooms;var friends=store.getState().friends.friends;var rooms=[];var userId=(_store$getState$auth$=store.getState().auth.userDetails)===null||_store$getState$auth$===void 0?void 0:_store$getState$auth$._id;activeRooms.forEach(function(room){var isRoomCreatedByMe=room.roomCreator.userId===userId;if(isRoomCreatedByMe){rooms.push(_objectSpread(_objectSpread({},room),{},{creatorUsername:\"Me\"}));}else{friends.forEach(function(f){if(f.id===room.roomCreator.userId){rooms.push(_objectSpread(_objectSpread({},room),{},{creatorUsername:f.username}));}});}});store.dispatch(setActiveRooms(rooms));};export var joinRoom=function joinRoom(roomId){var successCalbackFunc=function successCalbackFunc(){store.dispatch(setRoomDetails({roomId:roomId}));store.dispatch(setOpenRoom(false,true));var audioOnly=store.getState().room.audioOnly;store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));socketConnection.joinRoom({roomId:roomId});};var audioOnly=store.getState().room.audioOnly;webRTCHandler.getLocalStreamPreview(audioOnly,successCalbackFunc);};export var leaveRoom=function leaveRoom(){var roomId=store.getState().room.roomDetails.roomId;var localStream=store.getState().room.localStream;if(localStream){// each audio and video media has tracks property\nlocalStream.getTracks().forEach(function(track){return track.stop();});store.dispatch(setLocalStream(null));}var screenSharingStream=store.getState().room.screenSharingStream;if(screenSharingStream){screenSharingStream.getTracks().forEach(function(track){return track.stop();});store.dispatch(setScreenSharingStream(null));}store.dispatch(setRemoteStreams([]));webRTCHandler.closeAllConnections();socketConnection.leaveRoom({roomId:roomId});store.dispatch(setRoomDetails(null));store.dispatch(setOpenRoom(false,false));};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","setIsUserJoinedOnlyWithAudio","socketConnection","webRTCHandler","createNewRoom","successCalbackFunc","dispatch","audioOnly","getState","room","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","activeRooms","friends","rooms","userId","auth","userDetails","_id","forEach","isRoomCreatedByMe","roomCreator","push","creatorUsername","f","id","username","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/Users/pavankoushik/Downloads/mern-discord-clone/frontend/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\nimport {\n  setOpenRoom,\n  setRoomDetails,\n  setActiveRooms,\n  setLocalStream,\n  setRemoteStreams,\n  setScreenSharingStream,\n  setIsUserJoinedOnlyWithAudio,\n} from \"../store/actions/roomActions\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\n\nexport const createNewRoom = () => {\n  // only create room when we successfully get access to local stream(ie audio and video)\n  const successCalbackFunc = () => {\n    store.dispatch(setOpenRoom(true, true));\n\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.createNewRoom();\n  };\n\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\n\nexport const newRoomCreated = (data) => {\n  const { roomDetails } = data;\n  store.dispatch(setRoomDetails(roomDetails));\n};\n\nexport const updateActiveRooms = (data) => {\n  const { activeRooms } = data;\n\n  const friends = store.getState().friends.friends;\n  const rooms = [];\n\n  const userId = store.getState().auth.userDetails?._id;\n\n  activeRooms.forEach((room) => {\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\n\n    if (isRoomCreatedByMe) {\n      rooms.push({ ...room, creatorUsername: \"Me\" });\n    } else {\n      friends.forEach((f) => {\n        if (f.id === room.roomCreator.userId) {\n          rooms.push({ ...room, creatorUsername: f.username });\n        }\n      });\n    }\n  });\n\n  store.dispatch(setActiveRooms(rooms));\n};\n\nexport const joinRoom = (roomId) => {\n  const successCalbackFunc = () => {\n    store.dispatch(setRoomDetails({ roomId }));\n    store.dispatch(setOpenRoom(false, true));\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.joinRoom({ roomId });\n  };\n\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\n\nexport const leaveRoom = () => {\n  const roomId = store.getState().room.roomDetails.roomId;\n\n  const localStream = store.getState().room.localStream;\n  if (localStream) {\n    // each audio and video media has tracks property\n    localStream.getTracks().forEach((track) => track.stop());\n    store.dispatch(setLocalStream(null));\n  }\n\n  const screenSharingStream = store.getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach((track) => track.stop());\n    store.dispatch(setScreenSharingStream(null));\n  }\n\n  store.dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n\n  socketConnection.leaveRoom({ roomId });\n  store.dispatch(setRoomDetails(null));\n  store.dispatch(setOpenRoom(false, false));\n};\n"],"mappings":"8IAAA,MAAOA,MAAK,KAAM,gBAAgB,CAClC,OACEC,WAAW,CACXC,cAAc,CACdC,cAAc,CACdC,cAAc,CACdC,gBAAgB,CAChBC,sBAAsB,CACtBC,4BAA4B,KACvB,8BAA8B,CACrC,MAAO,GAAKC,iBAAgB,KAAM,oBAAoB,CACtD,MAAO,GAAKC,cAAa,KAAM,iBAAiB,CAEhD,MAAO,IAAMC,cAAa,CAAG,QAAhBA,cAAa,EAAS,CACjC;AACA,GAAMC,mBAAkB,CAAG,QAArBA,mBAAkB,EAAS,CAC/BX,KAAK,CAACY,QAAQ,CAACX,WAAW,CAAC,IAAI,CAAE,IAAI,CAAC,CAAC,CAEvC,GAAMY,UAAS,CAAGb,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACF,SAAS,CACjDb,KAAK,CAACY,QAAQ,CAACL,4BAA4B,CAACM,SAAS,CAAC,CAAC,CACvDL,gBAAgB,CAACE,aAAa,EAAE,CAClC,CAAC,CAED,GAAMG,UAAS,CAAGb,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACF,SAAS,CACjDJ,aAAa,CAACO,qBAAqB,CAACH,SAAS,CAAEF,kBAAkB,CAAC,CACpE,CAAC,CAED,MAAO,IAAMM,eAAc,CAAG,QAAjBA,eAAc,CAAIC,IAAI,CAAK,CACtC,GAAQC,YAAW,CAAKD,IAAI,CAApBC,WAAW,CACnBnB,KAAK,CAACY,QAAQ,CAACV,cAAc,CAACiB,WAAW,CAAC,CAAC,CAC7C,CAAC,CAED,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIF,IAAI,CAAK,2BACzC,GAAQG,YAAW,CAAKH,IAAI,CAApBG,WAAW,CAEnB,GAAMC,QAAO,CAAGtB,KAAK,CAACc,QAAQ,EAAE,CAACQ,OAAO,CAACA,OAAO,CAChD,GAAMC,MAAK,CAAG,EAAE,CAEhB,GAAMC,OAAM,wBAAGxB,KAAK,CAACc,QAAQ,EAAE,CAACW,IAAI,CAACC,WAAW,gDAAjC,sBAAmCC,GAAG,CAErDN,WAAW,CAACO,OAAO,CAAC,SAACb,IAAI,CAAK,CAC5B,GAAMc,kBAAiB,CAAGd,IAAI,CAACe,WAAW,CAACN,MAAM,GAAKA,MAAM,CAE5D,GAAIK,iBAAiB,CAAE,CACrBN,KAAK,CAACQ,IAAI,gCAAMhB,IAAI,MAAEiB,eAAe,CAAE,IAAI,GAAG,CAChD,CAAC,IAAM,CACLV,OAAO,CAACM,OAAO,CAAC,SAACK,CAAC,CAAK,CACrB,GAAIA,CAAC,CAACC,EAAE,GAAKnB,IAAI,CAACe,WAAW,CAACN,MAAM,CAAE,CACpCD,KAAK,CAACQ,IAAI,gCAAMhB,IAAI,MAAEiB,eAAe,CAAEC,CAAC,CAACE,QAAQ,GAAG,CACtD,CACF,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEFnC,KAAK,CAACY,QAAQ,CAACT,cAAc,CAACoB,KAAK,CAAC,CAAC,CACvC,CAAC,CAED,MAAO,IAAMa,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,MAAM,CAAK,CAClC,GAAM1B,mBAAkB,CAAG,QAArBA,mBAAkB,EAAS,CAC/BX,KAAK,CAACY,QAAQ,CAACV,cAAc,CAAC,CAAEmC,MAAM,CAANA,MAAO,CAAC,CAAC,CAAC,CAC1CrC,KAAK,CAACY,QAAQ,CAACX,WAAW,CAAC,KAAK,CAAE,IAAI,CAAC,CAAC,CACxC,GAAMY,UAAS,CAAGb,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACF,SAAS,CACjDb,KAAK,CAACY,QAAQ,CAACL,4BAA4B,CAACM,SAAS,CAAC,CAAC,CACvDL,gBAAgB,CAAC4B,QAAQ,CAAC,CAAEC,MAAM,CAANA,MAAO,CAAC,CAAC,CACvC,CAAC,CAED,GAAMxB,UAAS,CAAGb,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACF,SAAS,CACjDJ,aAAa,CAACO,qBAAqB,CAACH,SAAS,CAAEF,kBAAkB,CAAC,CACpE,CAAC,CAED,MAAO,IAAM2B,UAAS,CAAG,QAAZA,UAAS,EAAS,CAC7B,GAAMD,OAAM,CAAGrC,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACI,WAAW,CAACkB,MAAM,CAEvD,GAAME,YAAW,CAAGvC,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAACwB,WAAW,CACrD,GAAIA,WAAW,CAAE,CACf;AACAA,WAAW,CAACC,SAAS,EAAE,CAACZ,OAAO,CAAC,SAACa,KAAK,QAAKA,MAAK,CAACC,IAAI,EAAE,GAAC,CACxD1C,KAAK,CAACY,QAAQ,CAACR,cAAc,CAAC,IAAI,CAAC,CAAC,CACtC,CAEA,GAAMuC,oBAAmB,CAAG3C,KAAK,CAACc,QAAQ,EAAE,CAACC,IAAI,CAAC4B,mBAAmB,CACrE,GAAIA,mBAAmB,CAAE,CACvBA,mBAAmB,CAACH,SAAS,EAAE,CAACZ,OAAO,CAAC,SAACa,KAAK,QAAKA,MAAK,CAACC,IAAI,EAAE,GAAC,CAChE1C,KAAK,CAACY,QAAQ,CAACN,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAC9C,CAEAN,KAAK,CAACY,QAAQ,CAACP,gBAAgB,CAAC,EAAE,CAAC,CAAC,CACpCI,aAAa,CAACmC,mBAAmB,EAAE,CAEnCpC,gBAAgB,CAAC8B,SAAS,CAAC,CAAED,MAAM,CAANA,MAAO,CAAC,CAAC,CACtCrC,KAAK,CAACY,QAAQ,CAACV,cAAc,CAAC,IAAI,CAAC,CAAC,CACpCF,KAAK,CAACY,QAAQ,CAACX,WAAW,CAAC,KAAK,CAAE,KAAK,CAAC,CAAC,CAC3C,CAAC"},"metadata":{},"sourceType":"module"}