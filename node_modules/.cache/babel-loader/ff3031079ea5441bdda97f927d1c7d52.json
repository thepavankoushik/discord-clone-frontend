{"ast":null,"code":"import io from\"socket.io-client\";import{setPendingFriendsInvitations,setFriends,setOnlineUsers}from\"../store/actions/friendsActions\";import{updateDirectChatHistoryIfActive}from\"../shared/utils/chat\";import store from\"../store/store\";// we can directly use store in non react components. No need to map props to get actions\nimport*as roomHandler from\"./roomHandler\";import*as webRTCHandler from\"./webRTCHandler\";var socket=null;export var connectWithSocketServer=function connectWithSocketServer(userDetails){var jwtToken=userDetails.token;socket=io(\"http://localhost:5002\",{auth:{token:jwtToken}});// we use 'on' to listen to socket events and 'emit' to send socket events\n// connect is event provided by socket itself\nsocket.on(\"connect\",function(){console.log(\"succesfully connected with socket.io server\");console.log(socket.id);});// here we are listening for the custom event that we have created that is friends-invitation\nsocket.on(\"friends-invitations\",function(data){var pendingInvitations=data.pendingInvitations;store.dispatch(setPendingFriendsInvitations(pendingInvitations));});socket.on(\"friends-list\",function(data){var friends=data.friends;store.dispatch(setFriends(friends));});socket.on(\"online-users\",function(data){var onlineUsers=data.onlineUsers;store.dispatch(setOnlineUsers(onlineUsers));});socket.on(\"direct-chat-history\",function(data){updateDirectChatHistoryIfActive(data);});socket.on(\"room-create\",function(data){roomHandler.newRoomCreated(data);});socket.on(\"active-rooms\",function(data){roomHandler.updateActiveRooms(data);});socket.on(\"conn-prepare\",function(data){var connUserSocketId=data.connUserSocketId;webRTCHandler.prepareNewPeerConnection(connUserSocketId,false);socket.emit(\"conn-init\",{connUserSocketId:connUserSocketId});});socket.on(\"conn-init\",function(data){var connUserSocketId=data.connUserSocketId;webRTCHandler.prepareNewPeerConnection(connUserSocketId,true);});socket.on(\"conn-signal\",function(data){webRTCHandler.handleSignalingData(data);});socket.on(\"room-participant-left\",function(data){console.log(\"user left room\");webRTCHandler.handleParticipantLeftRoom(data);});};// up until now we are only listening to the socket event but we can also emit the socket event from client side as well as socket provides bidirectional communication\nexport var sendDirectMessage=function sendDirectMessage(data){console.log(data);socket.emit(\"direct-message\",data);};export var getDirectChatHistory=function getDirectChatHistory(data){socket.emit(\"direct-chat-history\",data);};export var createNewRoom=function createNewRoom(){socket.emit(\"room-create\");};export var joinRoom=function joinRoom(data){socket.emit(\"room-join\",data);};export var leaveRoom=function leaveRoom(data){socket.emit(\"room-leave\",data);};export var signalPeerData=function signalPeerData(data){socket.emit(\"conn-signal\",data);};","map":{"version":3,"names":["io","setPendingFriendsInvitations","setFriends","setOnlineUsers","updateDirectChatHistoryIfActive","store","roomHandler","webRTCHandler","socket","connectWithSocketServer","userDetails","jwtToken","token","auth","on","console","log","id","data","pendingInvitations","dispatch","friends","onlineUsers","newRoomCreated","updateActiveRooms","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","handleParticipantLeftRoom","sendDirectMessage","getDirectChatHistory","createNewRoom","joinRoom","leaveRoom","signalPeerData"],"sources":["/Users/pavankoushik/Downloads/mern-discord-clone/frontend/src/realtimeCommunication/socketConnection.js"],"sourcesContent":["import io from \"socket.io-client\";\nimport {\n  setPendingFriendsInvitations,\n  setFriends,\n  setOnlineUsers,\n} from \"../store/actions/friendsActions\";\nimport { updateDirectChatHistoryIfActive } from \"../shared/utils/chat\";\nimport store from \"../store/store\"; // we can directly use store in non react components. No need to map props to get actions\nimport * as roomHandler from \"./roomHandler\";\nimport * as webRTCHandler from \"./webRTCHandler\";\n\nlet socket = null;\n\nexport const connectWithSocketServer = (userDetails) => {\n  const jwtToken = userDetails.token;\n\n  socket = io(\"http://localhost:5002\", {\n    auth: {\n      token: jwtToken,\n    },\n  });\n\n  // we use 'on' to listen to socket events and 'emit' to send socket events\n\n  // connect is event provided by socket itself\n  socket.on(\"connect\", () => {\n    console.log(\"succesfully connected with socket.io server\");\n    console.log(socket.id);\n  });\n\n  // here we are listening for the custom event that we have created that is friends-invitation\n  socket.on(\"friends-invitations\", (data) => {\n    const { pendingInvitations } = data;\n    store.dispatch(setPendingFriendsInvitations(pendingInvitations));\n  });\n\n  socket.on(\"friends-list\", (data) => {\n    const { friends } = data;\n    store.dispatch(setFriends(friends));\n  });\n\n  socket.on(\"online-users\", (data) => {\n    const { onlineUsers } = data;\n    store.dispatch(setOnlineUsers(onlineUsers));\n  });\n\n  socket.on(\"direct-chat-history\", (data) => {\n    updateDirectChatHistoryIfActive(data);\n  });\n\n  socket.on(\"room-create\", (data) => {\n    roomHandler.newRoomCreated(data);\n  });\n\n  socket.on(\"active-rooms\", (data) => {\n    roomHandler.updateActiveRooms(data);\n  });\n\n  socket.on(\"conn-prepare\", (data) => {\n    const { connUserSocketId } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\n    socket.emit(\"conn-init\", { connUserSocketId: connUserSocketId });\n  });\n\n  socket.on(\"conn-init\", (data) => {\n    const { connUserSocketId } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n\n  socket.on(\"conn-signal\", (data) => {\n    webRTCHandler.handleSignalingData(data);\n  });\n\n  socket.on(\"room-participant-left\", (data) => {\n    console.log(\"user left room\");\n    webRTCHandler.handleParticipantLeftRoom(data);\n  });\n};\n\n// up until now we are only listening to the socket event but we can also emit the socket event from client side as well as socket provides bidirectional communication\nexport const sendDirectMessage = (data) => {\n  console.log(data);\n  socket.emit(\"direct-message\", data);\n};\n\nexport const getDirectChatHistory = (data) => {\n  socket.emit(\"direct-chat-history\", data);\n};\n\nexport const createNewRoom = () => {\n  socket.emit(\"room-create\");\n};\n\nexport const joinRoom = (data) => {\n  socket.emit(\"room-join\", data);\n};\n\nexport const leaveRoom = (data) => {\n  socket.emit(\"room-leave\", data);\n};\n\nexport const signalPeerData = (data) => {\n  socket.emit(\"conn-signal\", data);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}