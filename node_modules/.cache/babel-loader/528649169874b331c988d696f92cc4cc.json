{"ast":null,"code":"import _objectSpread from\"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from\"react\";import{styled}from\"@mui/system\";import MessagesHeader from\"./MessagesHeader\";import{connect}from\"react-redux\";// import DUMMY_MESSAGES from \"./DUMMY_MESSAGES\";\nimport Message from\"./Message\";import DateSeparator from\"./DateSeparator\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MainContainer=styled(\"div\")({height:\"calc(100% - 60px)\",overflow:\"auto\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\"});var convertDateToHumanReadable=function convertDateToHumanReadable(date,format){var map={mm:date.getMonth()+1,dd:date.getDate(),yy:date.getFullYear().toString().slice(-2),yyyy:date.getFullYear()};return format.replace(/mm|dd|yy|yyy/gi,function(matched){return map[matched];});// here for every matched format(ie for mm) from regular expression we map the suitable format from the map function(ie for mm we add 1 so that first month is represented by 1 instead of 0)\n};var Messages=function Messages(_ref){var chosenChatDetails=_ref.chosenChatDetails,messages=_ref.messages;return/*#__PURE__*/_jsxs(MainContainer,{children:[/*#__PURE__*/_jsx(MessagesHeader,{name:chosenChatDetails===null||chosenChatDetails===void 0?void 0:chosenChatDetails.name}),messages.map(function(message,index){var sameAuthor=index>0&&// we compare second message(index will be 1) with first message(index will be 0)\nmessages[index].author._id===messages[index-1].author._id;var sameDay=index>0&&convertDateToHumanReadable(new Date(message.date),\"dd/mm/yy\")===convertDateToHumanReadable(new Date(messages[index-1].date),\"dd/mm/yy\");return/*#__PURE__*/_jsxs(\"div\",{style:{width:\"97%\"},children:[(!sameDay||index===0)&&/*#__PURE__*/ // index === 0 is for first message\n_jsx(DateSeparator,{date:convertDateToHumanReadable(new Date(message.date),\"dd/mm/yy\")}),/*#__PURE__*/_jsx(Message,{content:message.content,username:message.author.username,sameAuthor:sameAuthor// so that in UI we donot show two same avatar if the consecutive message is from the same user\n,date:convertDateToHumanReadable(new Date(message.date),\"dd/mm/yy\"),sameDay:sameDay},message._id)]},message._id);})]});};var mapStoreStateToProps=function mapStoreStateToProps(_ref2){var chat=_ref2.chat;return _objectSpread({},chat);};export default connect(mapStoreStateToProps)(Messages);","map":{"version":3,"names":["React","styled","MessagesHeader","connect","Message","DateSeparator","MainContainer","height","overflow","display","flexDirection","alignItems","convertDateToHumanReadable","date","format","map","mm","getMonth","dd","getDate","yy","getFullYear","toString","slice","yyyy","replace","matched","Messages","chosenChatDetails","messages","name","message","index","sameAuthor","author","_id","sameDay","Date","width","content","username","mapStoreStateToProps","chat"],"sources":["/Users/pavankoushik/Downloads/mern-discord-clone/frontend/src/Dashboard/Messenger/Messages/Messages.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/system\";\nimport MessagesHeader from \"./MessagesHeader\";\nimport { connect } from \"react-redux\";\n// import DUMMY_MESSAGES from \"./DUMMY_MESSAGES\";\nimport Message from \"./Message\";\nimport DateSeparator from \"./DateSeparator\";\n\nconst MainContainer = styled(\"div\")({\n  height: \"calc(100% - 60px)\",\n  overflow: \"auto\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n});\n\nconst convertDateToHumanReadable = (date, format) => {\n  const map = {\n    mm: date.getMonth() + 1,\n    dd: date.getDate(),\n    yy: date.getFullYear().toString().slice(-2),\n    yyyy: date.getFullYear(),\n  };\n\n  return format.replace(/mm|dd|yy|yyy/gi, (matched) => map[matched]); // here for every matched format(ie for mm) from regular expression we map the suitable format from the map function(ie for mm we add 1 so that first month is represented by 1 instead of 0)\n};\n\nconst Messages = ({ chosenChatDetails, messages }) => {\n  return (\n    <MainContainer>\n      <MessagesHeader name={chosenChatDetails?.name} />\n      {messages.map((message, index) => {\n        const sameAuthor =\n          index > 0 && // we compare second message(index will be 1) with first message(index will be 0)\n          messages[index].author._id === messages[index - 1].author._id;\n\n        const sameDay =\n          index > 0 &&\n          convertDateToHumanReadable(new Date(message.date), \"dd/mm/yy\") ===\n            convertDateToHumanReadable(\n              new Date(messages[index - 1].date),\n              \"dd/mm/yy\"\n            );\n\n        return (\n          <div key={message._id} style={{ width: \"97%\" }}>\n            {(!sameDay || index === 0) && ( // index === 0 is for first message\n              <DateSeparator\n                date={convertDateToHumanReadable(\n                  new Date(message.date),\n                  \"dd/mm/yy\"\n                )}\n              />\n            )}\n            <Message\n              key={message._id}\n              content={message.content}\n              username={message.author.username}\n              sameAuthor={sameAuthor} // so that in UI we donot show two same avatar if the consecutive message is from the same user\n              date={convertDateToHumanReadable(\n                new Date(message.date),\n                \"dd/mm/yy\"\n              )}\n              sameDay={sameDay}\n            />\n          </div>\n        );\n      })}\n    </MainContainer>\n  );\n};\n\nconst mapStoreStateToProps = ({ chat }) => {\n  return {\n    ...chat,\n  };\n};\n\nexport default connect(mapStoreStateToProps)(Messages);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}