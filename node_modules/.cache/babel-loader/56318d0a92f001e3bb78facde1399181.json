{"ast":null,"code":"import _classCallCheck from \"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n  var _super = _createSuper(Polling);\n  function Polling() {\n    var _this;\n    _classCallCheck(this, Polling);\n    _this = _super.apply(this, arguments);\n    _this.polling = false;\n    return _this;\n  }\n  /**\n   * Transport name.\n   */\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n      this.readyState = \"pausing\";\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n      if (this.polling || !this.writable) {\n        var total = 0;\n        if (this.polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      this.polling = true;\n      this.doPoll();\n      this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          _this3.onClose();\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        _this3.onPacket(packet);\n      };\n      // decode payload\n      decodePayload(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emit(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n          _this5.emit(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\";\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      // avoid port if default for schema\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n      var encodedQuery = parseqs.encode(query);\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n    }\n  }]);\n  return Polling;\n}(Transport);","map":{"version":3,"names":["Transport","yeast","parseqs","encodePayload","decodePayload","Polling","arguments","polling","poll","onPause","readyState","pause","writable","total","once","doPoll","emit","data","callback","packet","type","onOpen","onClose","onPacket","socket","binaryType","forEach","close","write","packets","doWrite","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","Number","encodedQuery","encode","ipv6","hostname","indexOf","path","length"],"sources":["/Users/pavankoushik/Downloads/mern-discord-clone/frontend/node_modules/engine.io-client/build/esm/transports/polling.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this.polling = false;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose();\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emit(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emit(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = parseqs.encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}